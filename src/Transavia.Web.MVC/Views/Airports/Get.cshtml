@using Page = Transavia.Web.MVC.ViewModels.PageViewModel

@model Transavia.Web.MVC.ViewModels.SearchAirportsViewModel

<div style="display: -ms-inline-flexbox;">
    <p>
        <h3 class="flex-fill">
            Airports <span class="badge badge-pill badge-light" style="font-size: 50%; vertical-align: top">@Model.TotalFoundCount</span>
            <span class="float-right">
                <span class="dropdown">
                    <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Country (@Model.SelectedCountry.Name)
                    </button>
                    <div class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenuButton">
                        @foreach (var country in Model.SupportedCountries)
                        {
                            <a class="dropdown-item" href="@Url.Action("Get", new {country = @country.Id, page = @Model.Pagination.CurrenPageNumber})">@country.Name</a>
                        }
                    </div>
                </span>
                <a class="btn btn-success" href=@Url.Action("Create", "Airports")>Add Airport</a>
            </span>
        </h3>
    </p>
</div>
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Iata</th>
            <th scope="col">Name</th>
            <th scope="col">Lon</th>
            <th scope="col">Lat</th>
            <th scope="col">Status</th>
            <th scope="col">Country</th>
            <th scope="col">Continent</th>
            <th scope="col">Type</th>
            <th scope="col">Size</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var airport in Model.AirportsOnPage)
        {
        <tr>
            <td>@airport.Iata</td>
            <td>@airport.Name</td>
            <td>@airport.Lon</td>
            <td>@airport.Lat</td>
            <td>@airport.Status</td>
            <td>@airport.Country</td>
            <td>@airport.Continent</td>
            <td>@airport.Type</td>
            <td>@airport.Size</td>
        </tr>
        }
    </tbody>
</table>

@{
var vm = @Model;
var pagination = @Model.Pagination;

    <nav>
        @* Previos button *@
        <ul class="pagination justify-content-center">
            <li class="page-item @TrySetDisabled(pagination.Previous)">
                <a class="page-link" href=@Url.Action("Get",  new { country = @vm.SelectedCountry.Id, page = @pagination.Previous.Index }) aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>

            @* Page buttons *@
            @for (var index = pagination.Previous.Index; index < pagination.Previous.Index + 10; index++)
            {
                @if (index - 1 < pagination.Pages.Length)
                 {
                     <li class="page-item @TrySetActive(pagination.Pages[index - 1])">
                         @Html.ActionLink(index.ToString(), "Get", "Airports", new { country = @vm.SelectedCountry.Id, page = index }, new { @class="page-link" })
                         @*<a class="page-link" href=@Url.Action("Index",  new { pattern = @vm.Pattern, page = @page.Index })>@{return page.Index;}</a>*@
                     </li>
                 }
            }

            @* Next button *@
            <li class="page-item @TrySetDisabled(pagination.Next)">
                <a class="page-link" href=@Url.Action("Get",  new { country = @vm.SelectedCountry.Id, page = @pagination.Next.Index }) aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        </ul>
    </nav>
}
<!-- Html helpers -->

@functions
{
    public string TrySetActive(Page page)
    {
        return page.IsActive ? "active" : string.Empty;
    }

    public string TrySetDisabled(Page page)
    {
        return !page.IsActive ? "disabled" : string.Empty;
    }
}